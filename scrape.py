from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup

# ƒê∆∞·ªùng d·∫´n ChromeDriver
CHROMEDRIVER_PATH = r"chromedriver.exe"

def scrape_website(website):
    """M·ªü tr√¨nh duy·ªát Chrome v√† l·∫•y HTML c·ªßa trang web"""
    print(f"üîç ƒêang truy c·∫≠p: {website}")

    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Ch·∫°y kh√¥ng hi·ªÉn th·ªã tr√¨nh duy·ªát
    chrome_options.add_argument("--no-sandbox")  # B·ªè h·∫°n ch·∫ø sandbox
    chrome_options.add_argument("--enable-unsafe-webgl")  # Cho ph√©p WebGL
    chrome_options.add_argument("--disable-dev-shm-usage")  # Gi·∫£m b·ªô nh·ªõ chia s·∫ª
    chrome_options.add_argument("--blink-settings=imagesEnabled=false")  # T·∫Øt t·∫£i ·∫£nh
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")  # Tr√°nh b·ªã nh·∫≠n di·ªán l√† bot
    chrome_options.add_argument("--disable-extensions")  # T·∫Øt extension ƒë·ªÉ ch·∫°y nhanh h∆°n
    chrome_options.add_argument("--disable-popup-blocking")  # T·∫Øt ch·∫∑n popup
    chrome_options.add_argument("--disable-remote-fonts")  # T·∫Øt t·∫£i font t·ª´ web
    chrome_prefs = {
        "profile.default_content_setting_values": {
            "images": 2,  # Kh√¥ng t·∫£i ·∫£nh
            "stylesheet": 2,  # Kh√¥ng t·∫£i CSS
            "notifications": 2,  # T·∫Øt th√¥ng b√°o
            "geolocation": 2  # T·∫Øt y√™u c·∫ßu v·ªã tr√≠
        }
    }
    chrome_options.experimental_options["prefs"] = chrome_prefs

    service = Service(CHROMEDRIVER_PATH)
    driver = webdriver.Chrome(service=service, options=chrome_options)

    try:
        driver.get(website)
        html = driver.page_source.strip()  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi
        if not html:
            raise ValueError("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu: N·ªôi dung r·ªóng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ {website}: {e}")
        html = ""  # Tr·∫£ v·ªÅ chu·ªói r·ªóng n·∫øu c√≥ l·ªói
    finally:
        driver.quit()

    return html

def extract_body_content(html_content):
    """Tr√≠ch xu·∫•t n·ªôi dung body t·ª´ HTML"""
    soup = BeautifulSoup(html_content, "html.parser")

    # T√¨m t·∫•t c·∫£ c√°c div c√≥ 1 trong 2 class
    content_divs = soup.select("div.block-info-detail-mobile, div.block-product-view-mobile, div.block-info-detail-2-mobile" )

    if not content_divs:
        return ""

    # G·ªôp to√†n b·ªô HTML l·∫°i
    combined_html = "".join(str(div) for div in content_divs)

    return combined_html


def clean_body_content(body_content):
    """L√†m s·∫°ch n·ªôi dung, lo·∫°i b·ªè script, style, header, footer, nav v√† c√°c div c√≥ class 'header' ho·∫∑c 'footer'."""
    soup = BeautifulSoup(body_content, "html.parser")
    img_src=""
    container = soup.find("div", class_="product-view-image-product fhs_img_frame_container")
    if container:
        img_tag = container.find("img")
        if img_tag:
            img_src= img_tag.get("data-src") or img_tag.get("src")

    # L·∫•y n·ªôi dung vƒÉn b·∫£n v√† l√†m s·∫°ch kho·∫£ng tr·∫Øng
    cleaned_content = soup.get_text(separator="\n")
    cleaned_content = "\n".join(
        line.strip() for line in cleaned_content.splitlines() if line.strip()
    )

    return cleaned_content





def extract_image_src(html_content):
    """Tr√≠ch xu·∫•t src c·ªßa h√¨nh ·∫£nh t·ª´ HTML"""
    soup = BeautifulSoup(html_content, "html.parser")
    container = soup.find("div", class_="product-view-image-product fhs_img_frame_container")
    if container:
        img_tag = container.find("img")
        if img_tag:
            return img_tag.get("data-src") or img_tag.get("src")

def extract_page_content(html_content):
    """Tr√≠ch xu·∫•t n·ªôi dung t·ª´ HTML"""
    soup = BeautifulSoup(html_content, "html.parser")
    containers = soup.find_all("div", class_="product images-container")
    links = [a["href"] for container in containers for a in container.find_all("a", href=True)]
    return links